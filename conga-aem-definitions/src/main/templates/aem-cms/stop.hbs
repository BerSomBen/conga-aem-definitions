#!/bin/bash
# **************************************************************************************
#
#   This file is AUTO-GENERATED by CONGA. Please do not change it manually.
#
#   Run "stop --help" for more information.
#
# **************************************************************************************

### BEGIN customized AEM quickstart settings
export JAVA_HOME="{{jvm.path}}"
export PATH="$JAVA_HOME/bin:$PATH"

# timeout in seconds until the synchronous stop waits until it kills the instance
CQ_STOP_TIMEOUT_SECONDS={{quickstart.stopTimeout}}

### END customized AEM quickstart settings

# source lsb init functions
. /lib/lsb/init-functions

# Initially switch into crx-quickstart directory
cd "$(dirname "$0")"/..
# set quickstart directory
CQ_DIR=$(pwd)

# search for quickstart jar
if [ -z $CQ_JARFILE ]; then
	CQ_JARFILE=`ls app/*.jar | head -1`
fi

# define stop modes and set default
CQ_STOP_MODE_ASYNC="aysnc"
CQ_STOP_MODE_SYNC="sync"
CQ_STOP_MODE="$CQ_STOP_MODE_ASYNC"

# set the stop and status call options
CQ_STOP_OPTS='stop -c .'
CQ_STATUS_OPTS='status -c .'

# set path to conf dir and configuration files
CQ_CONF_DIR="$CQ_DIR/conf"
CQ_PID_FILE="$CQ_CONF_DIR/cq.pid"
CQ_CONTROLPORT_FILE="$CQ_CONF_DIR/controlport"

# set default values
CQ_STOP_STDOUT=
CQ_STOP_CODE=
CQ_STATUS_STR=
CQ_STATUS_STDOUT=
CQ_PID="-1"

# define regex to extract current instance status from status command
CQ_STATUS_REGEX="Sent 'status'.+:[[:space:]]+(.*)"

#
# define functions
#

# help function
display_help() {
    echo "Usage: $0 [option...] "
    echo
    echo "   --async        execute shutdown in asynchronous mode (only triggers shutdown, do not wait until instance shutdown is complete.)"
    echo "   --sync         execute shutdown in synchronous mode, (wait until instance shutdown is complete.)"
    echo "   --help         display the help"
    echo
    exit 1
}

# Sends the stop command to the AEM instance
stop_instance() {
# send stop command to aem and capture output
CQ_STOP_STDOUT="$(java -jar $CQ_JARFILE $CQ_STOP_OPTS)"
CQ_STOP_CODE=$?
}

# Trigger stop and wait until instance shutdown is complete or until timeout is reached
# Kills the instance when timeout is reached and the process is still running
stop_sync() {
  # trigger stop
  stop_instance
  # wait for shutdown with timeout
  WAIT_SECONDS=0
  until [ $WAIT_SECONDS -gt $CQ_STOP_TIMEOUT_SECONDS ]; do
    sleep 1s
    let WAIT_SECONDS+=1
    if [ ! -e /proc/$CQ_PID ]; then
      # process is not running anymore, break the loop
      break;
    fi
  done
  # finally check if instance if still running and kill the process
  if [ -e /proc/$CQ_PID ]; then
      kill $CQ_PID
      log_warning_msg "Instance killed because it did not shutdown within $CQ_STOP_TIMEOUT_SECONDS second(s)."
  else
    log_success_msg "Instance shutdown complete."
  fi
}

# Trigger stop but do not wait until instance shutdown is complete
stop_async() {
  # trigger stop
  stop_instance
  # check result
  if [ "${CQ_STOP_CODE}" == "0" ]; then
    log_success_msg "Instance shutting down triggered."
  else
    echo "$CQ_STOP_STDOUT"
    log_failure_msg "Instance shutdown not successful."
    exit 2
  fi
}

# Check for command line arguments
while [ $# -gt 0 ]; do
  case "$1" in
    --async)
        CQ_STOP_MODE="$CQ_STOP_MODE_ASYNC"
        ;;
    --sync)
        CQ_STOP_MODE="$CQ_STOP_MODE_SYNC"
      ;;
    --help)
        display_help
      ;;
    *)
      display_help
      ;;
  esac
  shift
done

#
# Main control part
#

# check if controlport file exists and try to retrieve instance status
if [ -f $CQ_CONTROLPORT_FILE ] && [ -f $CQ_PID_FILE ]; then
  # read the PID
  CQ_PID="$(cat $CQ_PID_FILE)"
  # control port exists, so we try to retrieve the status
  CQ_STATUS_STDOUT="$(java -jar $CQ_JARFILE $CQ_STATUS_OPTS)"
  # extract the instance status string using regex
  if [[ $CQ_STATUS_STDOUT =~ $CQ_STATUS_REGEX ]]; then
    CQ_STATUS_STR="${BASH_REMATCH[1]}"
  fi
else
  # early return since instance is not running, no further action required
  log_failure_msg "Instance not running."
  exit 1
fi

# early return when instance is already stopping
if  [ "$CQ_STATUS_STR" == "STOPPING" ]; then
  log_warning_msg "Instance already stopping."
  exit 0
fi

# stop instance depending on stop mode
if [ "${CQ_STOP_MODE}" == "$CQ_STOP_MODE_SYNC" ]; then
  stop_sync
elif [ "${CQ_STOP_MODE}" == "$CQ_STOP_MODE_ASYNC" ]; then
  stop_async
else
  log_error_msg "Invalid stop mode '${CQ_STOP_MODE}'"
  exit 1
fi
