{{ensureProperties
    "dispatcher.renderInstance.host"
    "dispatcher.renderInstance.port"
    "dispatcher.cacheRootPath"
~}}

/publish
  {  
  # Request headers that should be forwarded to the remote server.
  /clientheaders
    {
    # Forward all request headers that are end-to-end. If you want
    # to forward a specific set of headers, you'll have to list
    # them here.
{{~#each dispatcher.forwardClientHeaders}}
    "{{this}}"
{{~/each}}
    }
    
  # Hostname globbing for farm selection (virtual domain addressing)
  /virtualhosts
    {
    # Entries will be compared against the "Host" request header
    # and an optional request URL prefix.
    #
    # Examples:
    #
    #   www.company.com
    #   intranet.*
    #   myhost:8888/mysite
{{~#each tenants}}
    "{{this.tenant}}"
{{~#if this.config.serverNameSsl}}
    "{{this.config.serverNameSsl}}"
{{~/if}}
{{~/each}}
    }
    
  # The load will be balanced among these render instances
  /renders
    {
    /rend01
      {
      # Hostname or IP of the render
      /hostname "{{dispatcher.renderInstance.host}}"
      # Port of the render
      /port "{{dispatcher.renderInstance.port}}"
      # Connect timeout in milliseconds, 0 to wait indefinitely
      # /timeout "0"
      }
    }
    
  # The filter section defines the requests that should be handled by the dispatcher.
  /filter
    {
{{~#each dispatcher.filter}}
      /{{@index}}
        {{{aemDispatcherFilter this}}}
{{~/each}}
    }

  # The cache section regulates what responses will be cached and where.
  /cache
    {
    # The docroot must be equal to the document root of the webserver. The
    # dispatcher will store files relative to this directory and subsequent
    # requests may be "declined" by the dispatcher, allowing the webserver
    # to deliver them just like static files.
    /docroot "{{dispatcher.cacheRootPath}}"

    # Sets the level upto which files named ".stat" will be created in the 
    # document root of the webserver. When an activation request for some 
    # page is received, only files within the same subtree are affected 
    # by the invalidation.
{{~#if dispatcher.statFilesLevel}}
    /statfileslevel "{{dispatcher.statFilesLevel}}"
{{~ else}}
    #/statfileslevel "1"
{{~/if}}
    
    # Flag indicating whether to cache responses to requests that contain
    # authorization information.
    #/allowAuthorized "0"
    
    # Flag indicating whether the dispatcher should serve stale content if
    # no remote server is available.
    #/serveStaleOnError "0"
    
    # The rules section defines what responses should be cached based on
    # the requested URL. Please note that only the following requests can
    # lead to cacheable responses:
    #
    # - HTTP method is GET
    # - URL has an extension
    # - Request has no query string
    # - Request has no "Authorization" header (unless allowAuthorized is 1)
    /rules
      {
      /0000
        {
        # the globbing pattern to be compared against the url
        # example: *             -> everything
        #        : /foo/bar.*    -> only the /foo/bar documents
        #        : /foo/bar/*    -> all pages below /foo/bar
        #        : /foo/bar[./]* -> all pages below and /foo/bar itself
        #        : *.html        -> all .html files
        /glob "*"
        /type "allow"
        }
      /0001
        {
        /glob "*.htx"
        /type "deny"
        }
      }
      
    # The invalidate section defines the pages that are "invalidated" after
    # any activation. Please note that the activated page itself and all 
    # related documents are flushed on an modification. For example: if the 
    # page /foo/bar is activated, all /foo/bar.* files are removed from the
    # cache.
    /invalidate
      {
      /0000
        {
        /glob "*"
        /type "deny"
        }
      /0001
        {
        # Consider all HTML files stale after an activation.
        /glob "*.html"
        /type "allow"
        }
      /0002
        {
        # Consider all JSON files stale after an activation.
        /glob "*.json"
        /type "allow"
        }
      /0003
        {
        /glob "/etc/segmentation.segment.js"
        /type "allow"
        }
      /0004
        {
        /glob "*/analytics.sitecatalyst.js"
        /type "allow"
        }
      }

    # The allowedClients section restricts the client IP addresses that are
    # allowed to issue activation requests.
    /allowedClients
      {
      # Uncomment the following to restrict activation requests to originate
      # from "localhost" only.
      #
      #/0000
      #  {
      #  /glob "*"
      #  /type "deny"
      #  }
      #/0001
      #  {
      #  /glob "127.0.0.1"
      #  /type "allow"
      #  }
      }
      
    # The ignoreUrlParams section contains query string parameter names that
    # should be ignored when determining whether some request's output can be
    # cached or delivered from cache.
    #
    # In this example configuration, the "q" parameter will be ignored. 
    #/ignoreUrlParams
    #  {
    #  /0001 { /glob "*" /type "deny" }
    #  /0002 { /glob "q" /type "allow" }
    #  }

    # Cache response headers next to a cached file. On the first request to
    # an uncached resource, all headers matching one of the values found here
    # are stored in a separate file, next to the cache file. On subsequent
    # requests to the cached resource, the stored headers are added to the
    # response.
    #
    # Note, that file globbing characters are not allowed here.
    #
    #/headers
    #  {
    #  "Cache-Control"
    #  "Content-Disposition"
    #  "Content-Type"
    #  "Expires"
    #  "Last-Modified"
    #  "X-Content-Type-Options"
    #  }

    # A grace period defines the number of seconds a stale, auto-invalidated
    # resource may still be served from the cache after the last activation
    # occurring. Auto-invalidated resources are invalidated by any activation,
    # when their path matches the /invalidate section above. This setting
    # can be used in a setup, where a batch of activations would otherwise
    # repeatedly invalidate the entire cache.
    #
    #/gracePeriod "2"

    # Enable TTL evaluates the response headers from the backend, and if they
    # contain a Cache-Control max-age or Expires date, an auxiliary, empty file
    # next to the cache file is created, with modification time equal to the
    # expiry date. When the cache file is requested past the modification time
    # it is automatically re-requested from the backend.
    #
    # /enableTTL "1"

    }
    
  # The statistics sections dictates how the load should be balanced among the
  # renders according to the media-type. 
  /statistics
    {
    /categories
      {
      /html
        {
        /glob "*.html"
        }
      /others
        {
        /glob "*"
        }
      }
    }

  # Authorization checker: before a page in the cache is delivered, a HEAD
  # request is sent to the URL specified in /url with the query string
  # '?uri='. If the response status is 200 (OK), the page is returned
  # from the cache. Otherwise, the request is forwarded to the render and
  # its response returned.
  #
  # Only pages matching the /filter section below are checked, all other pages
  # get delivered unchecked.
  #
  # All header lines returned from the auth_checker's HEAD request that match
  # the /headers section will be returned as well.
  #
  #/auth_checker
  #  {
  #  /url "/bin/permissioncheck.html"
  #  /filter
  #    {
  #    /0000
  #      {
  #      /glob "*"
  #      /type "deny"
  #      }
  #    /0001
  #      {
  #      /glob "*.html"
  #      /type "allow"
  #      }
  #    }
  #  /headers
  #    {
  #    /0000
  #      {
  #      /glob "*"
  #      /type "deny"
  #      }
  #    /0001
  #      {
  #      /glob "Set-Cookie:*"
  #      /type "allow"
  #      }
  #    }
  #  }

  }
